// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Widgets/SCompoundWidget.h"
#include "Data/SDTypes.h"

class SBox;
class STextBlock;
class SVerticalBox;
struct MenuGroup;
class SSDGameOptionWidget;
class SSDNewGameWidget;
class SSDChooseRecordWidget;


/**
 * 
 */
class SANDBOXGAME_API SSDMenuWidget : public SCompoundWidget
{
public:
	SLATE_BEGIN_ARGS(SSDMenuWidget)
	{}

	SLATE_END_ARGS()

	/** Constructs this widget with InArgs */
	void Construct(const FArguments& InArgs);

	// 重写tick函数
	virtual void Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime) override;

private:
	// MenuIteam绑定的方法(点击时SSDMenuIteamWidget里通过按钮按下执行调用该事件)
	void MenuIteamOnclicked(EMenuItem::Type ItemType);

	// 修改语言
	void ChangeCulture(ECultureTeam Culture);

	// 修改音量
	void ChangeVolume(const float MusicVolume, const float SoundVolume);

	// 初始化所有的控件
	void InitializeMenuList();

	// 选择显示的界面
	void ChooseWidget(EMenuType::Type WidgetType);

	// 修改菜单的大小
	void ResetWidgetSize(float NewWidget, float NewHeight);

	// 初始化动画组件
	void InitializedAnimation();

	// 播放关闭动画
	void PlayClose(EMenuType::Type NewMenu);

	// 退出游戏
	void QuitGame();

private:
	// 根节点指针
	TSharedPtr<SBox> RootSizeBox;

	// 获取Menu样式
	const struct FSDMenuStyle* MenuStyle;

	// 标题内容
	TSharedPtr<STextBlock> TitleText;

	// 垂直列表,存放所有按钮
	TSharedPtr<SVerticalBox> ContentBox;

	// 保存菜单组map，key：菜单控件类型 value：控件指针
	TMap<EMenuType::Type, TSharedPtr<MenuGroup>> MenuMap;

	// 游戏设置widget的指针
	TSharedPtr<SSDGameOptionWidget> GameOptionWidget;

	// 新游戏控件指针
	TSharedPtr<SSDNewGameWidget> NewGameWidget;

	// 选择存档控件指针
	TSharedPtr<SSDChooseRecordWidget> ChooseRecordWidget;

	// 动画播放器
	FCurveSequence MenuAnimation;

	// 曲线控制器
	FCurveHandle MenuCurve;

	// 用来保存新的长度
	float CurrentHeight;

	// 是否已经显示Menu组件
	bool IsMenuShow;

	// 是否锁住按钮
	bool ControlLocked;

	// 保存当前的动画状态
	EMenuAnim::Type AnimState;

	// 保存当前的菜单
	EMenuType::Type CurrentMenu;

};
